---
# TODO consistent tagging
# TODO outputs
# TODO CF Stack Deletion and assumed roles
# TODO permissions permissions permissions
# TODO Setup user roles and check security issues
# TODO Manage CF outputs in SSM
AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation-Stack for the core code pipeline. This stack is created in the DevOps Account.

Parameters:
  RemoteAccountTest:
    Description: The remote workload account ID
    Type: String
  BaseStack:
    Description: Base CF stack to import references from
    Type: String

Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /
  CodeBuildServiceRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn: CodeBuildServiceRole
    Properties:
      PolicyName: CodeBuildServiceRolePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:GetObjectVersion
            Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket"
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket"
                  - '/*'
      Roles:
        - !Ref CodeBuildServiceRole                

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - CodeBuildServiceRole
    Properties:
      Artifacts:
        Type: S3
        Name: core-pipeline.zip
        Packaging: ZIP
        Location: 
          Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket" # TODO use a separate bucket???
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          env:
            variables:
              PROJECT: "Enter the name of Git project"
              REPOSITORY: "ENTER_A_NAME"
              BRANCH: "ENTER_A_BRANCH"
              STAGE: "ENTER_A_STAGE"
              ARTIFACT_BUCKET: "Artifact Bucket"
              PIPELINE_ROLE_ARN: "Pipeline role ARN"
              PIPELINE_DEPLOY_ROLE_ARN: "Pipeline deploy role ARN"
              PIPELINE_KMS_KEY_ARN: "Pipeline KMS key ARN"
              REMOTE_ACCOUNT_ID: "Remote workload account id"
              DEV_OPS_ACCOUNT_ID: "DevOps account id"
            git-credential-helper: yes
          phases:
            pre_build:
              commands:
                - ls -lah
                - git clone https://github.com/${PROJECT}/${REPOSITORY}.git
                - cd $REPOSITORY
                - ls -lah
                - git checkout $BRANCH
                - ls -lah
                - cp build/pipeline-${STAGE}.json build/pipeline.json
                - cp build/cross-account-roles-${STAGE}.json build/cross-account-roles.json
                - |
                  cat <<EOF > pipeline_env.json
                  {
                    "ArtifactBucket": "${ARTIFACT_BUCKET}",
                    "PipelineRoleArn": "${PIPELINE_ROLE_ARN}",
                    "PipelineDeployRoleArn": "${PIPELINE_DEPLOY_ROLE_ARN}",
                    "PipelineKmsKeyArn": "${PIPELINE_KMS_KEY_ARN}",
                    "Branch": "${BRANCH}",
                    "Stage": "${STAGE}",
                    "RemoteAccount": "${REMOTE_ACCOUNT_ID}",
                    "DevOpsAccount": "${DEV_OPS_ACCOUNT_ID}"
                  }
                  EOF
          artifacts:
            base-directory: ${REPOSITORY}
            files:
              - build/pipeline.yaml
              - build/pipeline.json
              - build/cross-account-roles.yaml
              - build/cross-account-roles.json
              - pipeline_env.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: STAGE
            Value: test
          - Name: PROJECT
            Value: Enter the name of Git project
          - Name: REPOSITORY
            Value: Provide the name of the repository
          - Name: BRANCH
            Value: Provide the branch
          - Name: ARTIFACT_BUCKET
            Value: 
              Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket"
          - Name: PIPELINE_ROLE_ARN
            Value: !GetAtt PipeLineRole.Arn
          - Name: PIPELINE_DEPLOY_ROLE_ARN
            Value: !GetAtt PipelineDeployRole.Arn
          - Name: PIPELINE_KMS_KEY_ARN
            Value: 
              Fn::ImportValue: !Sub "${BaseStack}:CodePipelineKmsKeyArn"
          - Name: REMOTE_ACCOUNT_ID
            Value: !Ref RemoteAccountTest
          - Name: DEV_OPS_ACCOUNT_ID
            Value: !Ref AWS::AccountId

      Name: "CreateUpdateBuildPipeline"
      ServiceRole: !Ref CodeBuildServiceRole


  PipeLineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CoreCodepipelineRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CoreCodepipelinePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - codepipeline:*
              - iam:ListRoles
              - cloudformation:Describe*
              - cloudFormation:List*
              - codecommit:List*
              - codecommit:Get*
              - codecommit:GitPull
              - codecommit:UploadArchive
              - codecommit:CancelUploadArchive
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
              - iam:PassRole
              - s3:ListAllMyBuckets
              - s3:GetBucketLocation
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
            Resource: 
              Fn::ImportValue: !Sub "${BaseStack}:CodePipelineKmsKeyArn"
          -
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetBucketPolicy
              - s3:GetObject
              - s3:ListBucket
              - s3:GetObjectVersion
              - s3:GetBucketVersioning
              - s3:ListBucketVersions
              - s3:GetObjectVersionTagging
            Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket"
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket"
                  - '/*'
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: 
              - !GetAtt PipelineDeployRole.Arn
              - !Sub arn:aws:iam::${RemoteAccountTest}:role/CrossAccountRole

      Roles:
        - !Ref PipeLineRole

  PipelineDeployRole:
    Type: AWS::IAM::Role
    DependsOn: PipeLineRole
    Properties:
      # TOTO better resource naming
      RoleName: CoreCodepipelineDeployRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  PipelineDeployPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CoreCodepipelineDeloyPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - codepipeline:*
              - iam:ListRoles
              - codecommit:List*
              - codecommit:Get*
              - codecommit:GitPull
              - codecommit:UploadArchive
              - codecommit:CancelUploadArchive
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - iam:PassRole
              - s3:*
              - cloudformation:*
              - iam:* # TODO refine permissions 
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
            Resource: 
              Fn::ImportValue: !Sub "${BaseStack}:CodePipelineKmsKeyArn"
          -
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetBucketPolicy
              - s3:GetObject
              - s3:ListBucket
              - s3:GetObjectVersion
              - s3:GetBucketVersioning
              - s3:ListBucketVersions
              - s3:GetObjectVersionTagging
            Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket"
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket"
                  - '/*'
          -
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/GitHubOauthToken"
      Roles:
        - !Ref PipelineDeployRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - PipelinePolicy
      - PipeLineRole
    Properties:
      RoleArn: !GetAtt PipeLineRole.Arn
      Name: !Ref AWS::StackName
      ArtifactStore:
        Location: 
          Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket"
        Type: S3
        EncryptionKey: 
          Type: KMS
          Id: 
            Fn::ImportValue: !Sub "${BaseStack}:CodePipelineKmsAlias"
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration: 
                S3Bucket: 
                  Fn::ImportValue: !Sub "${BaseStack}:ArtifactBucket"
                S3ObjectKey: core-pipeline.zip
              OutputArtifacts: 
                - Name: SourceOutput 
              RunOrder: 1
        - Name: CreateCrossAccountRoles
          Actions:
            - Name: CreateCrossAccountRoles
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE # TODO replace failed
                StackName: cross-account-roles-deployer
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: SourceOutput::build/cross-account-roles.yaml
                TemplateConfiguration: SourceOutput::build/cross-account-roles.json
                RoleArn: !Sub arn:aws:iam::${RemoteAccountTest}:role/CrossAccountCoreRole
                ParameterOverrides: |
                  {
                    "ArtifactBucket" : { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "ArtifactBucket"]},
                    "PipelineKmsKeyArn" : { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "PipelineKmsKeyArn"]},
                    "Branch" : { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "Branch"]},
                    "Stage" : { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "Stage"]},
                    "DevOpsAccount": { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "DevOpsAccount"]}
                  }
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
              RoleArn: !Sub arn:aws:iam::${RemoteAccountTest}:role/CrossAccountRole
        - Name: DeployPipeline
          Actions:
            - Name: DeployPipeline
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE # TODO replace failed
                StackName: pipeline-deployer
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: SourceOutput::build/pipeline.yaml
                TemplateConfiguration: SourceOutput::build/pipeline.json
                RoleArn: !GetAtt PipelineDeployRole.Arn
                ParameterOverrides: |
                  {
                    "ArtifactBucket" : { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "ArtifactBucket"]},
                    "PipelineKmsKeyArn" : { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "PipelineKmsKeyArn"]},
                    "Branch" : { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "Branch"]},
                    "Stage" : { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "Stage"]},
                    "RemoteAccount" : { "Fn::GetParam" : ["SourceOutput", "pipeline_env.json", "RemoteAccount"]}
                  }
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
      